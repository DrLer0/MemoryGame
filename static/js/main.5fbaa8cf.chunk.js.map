{"version":3,"sources":["assets/images/gary.png","assets/images/HandsomeSquidward.png","assets/images/mrKrabs.png","assets/images/Patrick.png","assets/images/planketon.png","assets/images/SandyCheeks.jpg","assets/images/Suds.png","assets/images/sPonGEbOB.png","assets/images/spongegar.png","assets/images/pearl.png","assets/images/drink.png","assets/images/krabbypatty.png","components/Nav/index.js","components/Grid/index.js","components/Icons/index.js","components/Counter/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","props","className","href","id","Container","fluid","children","Row","Col","size","split","map","join","renderRow","group","index","key","renderColumn","image","data-id","src","alt","onClick","handleIncrement","Icons","imageGroups","amountOfItemsPerGroup","items","groups","total","length","i","slice","push","groupBy","arr","shuffle","array","temporaryValue","randomIndex","currentIndex","Math","floor","random","clickedPics","countState","Counter","myarr1","require","state","imageArray","setState","count","console","log","handleReset","that","this","$","click","dataId","getAttribute","includes","text","alert","prevProps","notifyRequired","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5fbaa8cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gary.ac92150d.png\";","module.exports = __webpack_public_path__ + \"static/media/HandsomeSquidward.de84ca54.png\";","module.exports = __webpack_public_path__ + \"static/media/mrKrabs.7be76b99.png\";","module.exports = __webpack_public_path__ + \"static/media/Patrick.7d9c9565.png\";","module.exports = __webpack_public_path__ + \"static/media/planketon.bc26e2c4.png\";","module.exports = __webpack_public_path__ + \"static/media/SandyCheeks.ff5ca31b.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Suds.095cb721.png\";","module.exports = __webpack_public_path__ + \"static/media/sPonGEbOB.1724279f.png\";","module.exports = __webpack_public_path__ + \"static/media/spongegar.ec3a7dc1.png\";","module.exports = __webpack_public_path__ + \"static/media/pearl.cca740be.png\";","module.exports = __webpack_public_path__ + \"static/media/drink.aeb1b886.png\";","module.exports = __webpack_public_path__ + \"static/media/krabbypatty.fa36b06c.png\";","import React from \"react\";\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n      <a className=\"navbar-brand\" href=\"/\">\n        Clicky Game\n      </a>\n      <p>Click and image to begin!</p>\n      <p>Click Count: <span id=\"count\"></span></p>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\n\n// Exporting the Container, Row, and Col components from this file\n\n// This Container component allows us to use a bootstrap container without worrying about class names\nexport function Container({ fluid, children }) {\n  return <div className={`container${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Row component lets us use a bootstrap row without having to think about class names\nexport function Row({ fluid, children }) {\n  return <div className={`row${fluid ? \"-fluid\" : \"\"}`}>{children}</div>;\n}\n\n// This Col component lets us size bootstrap columns with less syntax\n// e.g. <Col size=\"md-12\"> instead of <div className=\"col-md-12\">\nexport function Col({ size, children }) {\n  return (\n    <div\n      className={size\n        .split(\" \")\n        .map(size => \"col-\" + size)\n        .join(\" \")}\n    >\n      {children}\n    </div>\n  );\n}\n","import React from \"react\";\nimport {Col, Row} from \"../Grid\";\n\nfunction Icons(props){\n    // console.log(props.arr);\n    var imageGroups = groupBy(4, props.arr);\n    return (<div>\n              {imageGroups.map(renderRow)}\n            </div>);\n}\n\nfunction renderRow(group, index){\n    return (<Row key={index}>\n             {group.map(renderColumn)}\n            </Row>);\n}\n  \nfunction renderColumn(image, index, props){\nreturn (<Col size=\"3\" key={index}>\n            <img data-id={image.id} className=\"btn btn-sm img-thumbnail\" src={image.image} alt=\"\" onClick={props.handleIncrement} ></img>\n        </Col>);\n}\n\nfunction groupBy(amountOfItemsPerGroup, items){\n    var groups = [], group, total = items.length;\n    for (var i=0; i < total; i += amountOfItemsPerGroup) {\n        group = items.slice(i, i+amountOfItemsPerGroup);\n        groups.push(group);\n    }\n    \n    return groups;\n}\n\n\n\nexport default Icons;","import React from \"react\";\nimport Nav from \"../Nav\";\nimport {Container} from \"../Grid\";\nimport Icons from \"../Icons\";\nimport $ from \"jquery\";\n  \n  function shuffle(array) {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n  \n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n  \n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n  \n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n  \n    return array;\n  }\n  \n  let clickedPics = [];\n  let countState = 0;\n  \n\n// By extending the React.Component class, Counter inherits functionality from it\nclass Counter extends React.Component {\n    myarr1 = [\n        {\n          id: 1, \n          image: require(\"../../assets/images/gary.png\")\n        }, \n        {\n          id: 2, \n          image: require(\"../../assets/images/HandsomeSquidward.png\")\n        },\n        {\n          id: 3, \n          image: require(\"../../assets/images/mrKrabs.png\")\n        },\n        {\n          id: 4, \n          image: require(\"../../assets/images/Patrick.png\")\n        },\n        {\n          id: 5, \n          image: require(\"../../assets/images/planketon.png\")\n        },\n        {\n          id: 6, \n          image: require(\"../../assets/images/SandyCheeks.jpg\")\n        },\n        {\n          id: 7, \n          image: require(\"../../assets/images/Suds.png\")\n        },\n        {\n          id: 8, \n          image: require(\"../../assets/images/sPonGEbOB.png\")\n        },\n        {\n          id: 9, \n          image: require(\"../../assets/images/spongegar.png\")\n        },\n        {\n          id: 10, \n          image: require(\"../../assets/images/pearl.png\")\n        },\n        {\n          id: 11, \n          image: require(\"../../assets/images/drink.png\")\n        },\n        {\n          id: 12, \n          image: require(\"../../assets/images/krabbypatty.png\")\n        }\n      ];\n  // Setting the initial state of the Counter component\n  state = {\n    imageArray: this.myarr1\n  };\n\n  // handleIncrement increases this.state.count by 1\n  handleIncrement = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: this.state.count + 1 });\n    console.log(\"handleIncrement\");\n  };\n\n  // handleDecrement decreases this.state.count by 1\n  handleReset = () => {\n    // We always use the setState method to update a component's state\n    this.setState({ count: 0});\n  };\n  componentDidMount(){\n    var that = this;\n      console.log(\"--------\")\n      console.log(that);\n      console.log(\"--------\")\n      \n    $(\".btn\").click(function(){\n        let dataId = this.getAttribute(\"data-id\")\n        console.log(dataId);\n        if(clickedPics.includes(dataId)){\n            // console.log(\"already in array\");\n            countState = 0;\n            $(\"#count\").text(countState);\n            clickedPics = [];\n            that.setState({imageArray: shuffle(that.state.imageArray)});\n        }\n        else{\n            clickedPics.push(this.getAttribute(\"data-id\"));\n            countState++;\n            $(\"#count\").text(countState);\n            that.setState({imageArray: shuffle(that.state.imageArray)});\n        }\n        if(countState === 12){\n            alert(\"You won!\");\n        }\n    })\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    return { notifyRequired: prevProps.text !== this.props.text };\n  }\n  \n  componentDidUpdate(prevProps){\n    console.log(\"didUpdate?\")\n    if(prevProps.text !== this.props.text){\n      this.setState({imageArray: shuffle(this.state.imageArray)});\n      console.log(\"updated?\")\n    }\n}\n  \n\n  // The render method returns the JSX that should be rendered\n  render() {\n    return (\n        <div>\n        <Nav\n          count={countState}\n        />\n        <Container fluid>\n          <h1>Clicky Game!</h1>\n          <p> Click on an image to earn points, but don't click on any more than once!</p>\n        </Container>\n        <Container fluid>\n          <Icons arr={this.state.imageArray} \n          handleIncrement={this.handleIncrement} />\n        </Container>\n        </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React from \"react\";\nimport Counter from \"./components/Counter\";\n\n\nfunction App() {\n  return (\n      <div>\n        <Counter />\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}